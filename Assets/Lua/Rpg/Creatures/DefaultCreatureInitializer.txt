function InitializeCreature(creature, definition, level)
	
	if (level == nil or level.CompareTo(0) <= 0) then
		error("level must be at least 1")
	end

	if (definition == nil) then
		error("definition must not be nil")
	end

	creature.party = 1
	creature.level = level
	creature.accuracy.BaseValue = math.ceil(ScaleAttribute(configuration.default_creature_stats.accuracy, level) * definition.Properties.accuracy)
	creature.criticalHitChance.BaseValue = math.ceil(ScaleAttribute(configuration.default_creature_stats.critical_hit_chance, level) * definition.Properties.critical_hit_chance)
	creature.criticalHitDamageMultiplier.BaseValue = math.ceil(ScaleAttribute(configuration.default_creature_stats.critical_damage_multiplier, level) * definition.Properties.critical_damage_multiplier)

	creature.maximumHealth.BaseValue = math.ceil(ScaleAttribute(configuration.default_creature_stats.maximum_health, level) * definition.Properties.maximum_health)
	creature.currentHealth = creature.maximumHealth.Total
	creature.damage.BaseValue = math.ceil(ScaleAttribute(configuration.default_creature_stats.damage, level) * definition.Properties.damage)
	creature.defense.BaseValue = math.ceil(ScaleAttribute(configuration.default_creature_stats.defense, level) * definition.Properties.defense)
	creature.evasion.BaseValue = math.ceil(ScaleAttribute(configuration.default_creature_stats.evasion, level) * definition.Properties.evasion)
	creature.penetration.BaseValue = math.ceil(ScaleAttribute(configuration.default_creature_stats.penetration, level) * definition.Properties.penetration)
	creature.precision.BaseValue = math.ceil(ScaleAttribute(configuration.default_creature_stats.precision, level) * definition.Properties.precision)
	creature.resilience.BaseValue = math.ceil(ScaleAttribute(configuration.default_creature_stats.resilience, level) * definition.Properties.resilience)

	local context = { creature=creature }
	setmetatable(context, {__index = _G})

	engine.Logging.Log('loading calculator for xp')
	local xpCalculator = engine.GetConfiguration('creatures.XpValueCalculationScript')
	
	if type(xpCalculator) == 'function' then
		creature.ExtraProperties['xp'] = xpCalculator(creature)
	else
		creature.ExtraProperties['xp']= load(xpCalculator, nil, nil, context)()
	end

	engine.Logging.Log('loading calculator for gold')
	local goldCalculator = engine.GetConfiguration('creatures.GoldValueCalculationScript')
	
	if type(goldCalculator) == 'function' then
		creature.ExtraProperties['gold'] = goldCalculator(creature)
	else
		creature.ExtraProperties['gold'] = load(goldCalculator, nil, nil, context)()
	end

	creature.ToHitScript = 'creatures.ToHitScript'
end
return InitializeCreature